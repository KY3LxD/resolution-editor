extends layout

block styles
  link(href="/css/editorStyle.css" type="text/css" rel="stylesheet")

block content
  .section#editor-main: .container
    if code
      #code-preset.hide-this=code
    h3 Resolution Editor
    .divider
    h5.light
      +icon("my_location", "mediumsmall left text-darken-3 " + sectext)
      | Your Token:
      //-git removes spaces at end of lines so this is necessary
      =" "
      span#token-preset.lighten-3(class=sec)=token
    p.justify Please write this token down, because it will be used to identify your resolution when you want continue working on it later. Talk to your chair if you've forgotten your resolution token. (Looking at your browser's history can be helpful too.)
    mixin status-info(index, title, description)
      h5.light
        +icon("assignment", "mediumsmall left text-lighten-1 light-green-text")
        | Status:
        =" " + title
        b.text-lighten-1.grey-text=" #" + index
      p.justify=description
    case meta.stage
      when 0
        +status-info(0, "Initial Creation", "This resolution has not been opened with the resolution token yet. The token will be released back into the system after a while if the resolution is closed without saving.")
      when 1
        +status-info(1, "Delegate Writing", "This resolution is being worked on by the delegate and has been opened with the resolution token. The reolution token is now bound to this saved resolution. The Delegate has to have their chair enter their access code to approve the written resolution by the chair.")
      when 2
        +status-info(2, "Approval Panel Correcting", "The Approval Panel is correcting this resolution. Only Chairs, who always have access, and the Approval Panel can edit this resolution. After having entered the Approval Panel access code to open the editor, a button is pressed after checking spelling and grammar to approve and advance this resolution to the next step.")
      when 3
        +status-info(3, "Formal Clearing Viewing", "The Formal Clearing is looking at this resolution and determining its fulfilment of the formal constraints. The Formal Clearing approves the resolution following the same scheme as the Approval Panel; a button is pressed by the Formal Clearing to approve and advance the resolution.")
      when 4
        +status-info(4, "Waiting to Print", "This resolution has completed its validation process and will soon be printed by the Secreteriat. From this point on only Chairs have editing access to this resolution.")
      when 5
        +status-info(5, "Waiting to Debate", "The Secreteriat has printed this resolution for the committee and it will be debated some time after the printed copies have been distributed to the Delegates.")
      when 6
        +status-info(6, "In Debate", "This resolution is being actively debated by its committee and will frequently change because of this. LiveView, a propsed feature, will be enabled for this resolution during this stage and can be accessed by another device for presentation when this feature is implemented.")
      when 7
        +status-info(7, "Finished", "The final stage of the resolution has been reached. Congratulations! The corresponding committie has debated and finalized the content of this resolution. It may still be editied for use in the resolution booklet though.")
      default
        +status-info("?", "Unknown", "Could not determine the status of this resolution. There seens to have been an error in the system. Please report this immediately as it may negatively affect the whole resolution workflow.")
    h5.light Important Note
      +icon("announcement", "mediumsmall left red-text")
    p.justify Please be aware of the fact that #[b opening the same resolution on multiple devices can have adverse effects on the integrity of the resolution] because the changes aren't updated on other devices until the page is reloaded and all local changes are thereby deleted.
    h5.light Meta-Information
    //todo: stage history
    mixin collapsible-item(title, icon)
      li
        .collapsible-header
          +icon(icon, "text-darken-3 light-blue-text")
          =title
        .collapsible-body
          block
    ul.collapsible(data-collapsible="expandable")
      mixin item-table
        table: tbody
          block
      mixin t-item(label, content)
        tr
          td=label
          td=content
      +collapsible-item("Usage Log", "access_time")
        +item-table
          +t-item("Created:", meta.created)
          +t-item("Last Change:", meta.changed)
          +t-item("Last Render:", meta.lastRender)
      +collapsible-item("Stage History", "history")

      +collapsible-item("Structure Analysis", "filter_list")
        +item-table
          +t-item("Words:", meta.wordCount)
          +t-item("Content Nodes:", meta.nodeCount)
    h5.light Actions
    .collection#meta-buttons
      mixin meta-button(id, text, icon, tooltipText, classes)
        a.collection-item.waves-effect.waves-light(class=classes id=id)&attributes(tooltip(tooltipText, "top"))
          +icon(icon, "left")
          =text
      +meta-button("action-save", "Save", "backup", "Saves the resolution to the server", pritext)
      +meta-button("action-pdf", "View PDF", "description", "Generates a formatted PDF document", pritext)
      +meta-button("legacy-action-save", "Save to file (deprecated)", "file_download", "Downloads the resolution in a resusable format", "grey-text")
      +meta-button("legacy-action-load", "Open from file (deprecated)", "file_upload", "Loades a resolution from a previously saved file", "grey-text")
    //-modal is to be used with the makeAlertMessage function which will then populate all of these fields
    .modal#alert-message-modal
      .modal-content
        h4.modal-content-title Message
        span.error-code.grey-text
        p.modal-content-body Text content placeholder!
        .file-field.input-field#file-selector.hide-this
          .btn
            span Select file
            input.file-input(type="file")
          .file-path-wrapper
            input.file-path.validate(type="text" placeholder="File Path" pattern="^.*\.rso")
      .modal-footer
        a.modal-action.modal-close.waves-effect.btn-flat.modal-dismiss-btn(class=priwaves) OK
    mixin floating-sm-btn(color, type, icon, tooltipText)
      a.btn-floating(class=color id=type)&attributes(tooltip(tooltipText, "top")): +icon(icon)
    #eab-inactive-anchor
    #eab-wrapper.right.hide-this
      //-eab stands for edit action button
      +floating-sm-btn("blue", "eab-move-down", "arrow_downward", "Moves this clause down one space")
      +floating-sm-btn("blue", "eab-move-up", "arrow_upward", "Moves this clause up one space")
      +floating-sm-btn("indigo", "eab-add-sub", "format_indent_increase", "Creates a subclause in this clause")
      +floating-sm-btn("cyan", "eab-add-ext", "playlist_add", "Adds a continuation text field under these subclauses")
      +floating-sm-btn("deep-orange", "eab-clear", resetIcon, "Resets the fields in this clause and removes the content continuation field")
      +floating-sm-btn("red", "eab-delete", "delete", "Removes this clause and all its subclauses")
      +floating-sm-btn("green", "eab-done", "done", "Finish editing and deactivate edit mode")
    mixin content-card(cardId)
      .row
        .col.s12(id=cardId class!=attributes.class)
          block
    mixin clause-content-field(type, placeholder, addClasses)
      .input-field(class=type)
        textarea.materialize-textarea(class=addClasses + " " + type + "-text")
        label(for="materialize-textarea")=placeholder
    mixin clause-card(cardId, clauseType, cardType)
      +content-card(cardId)
        h5=cardType + " Clauses"
        .clause-list
          .clause(data-clause-type=clauseType)
            .divider
            h6.grey-text.text-darken-2.clause-title
              a.edit-mode-btn.btn.right.white-text(class=pri)&attributes(tooltip("Activates editing of this clause", "left"))
                +icon("mode_edit", "icon-sm-med")
              span.clause-prefix
              | Clause #
              span.clause-number 1
            .row.phrase-input-wrapper
              .col.xl4.m6.s12
                .input-field
                  input.autocomplete.required.phrase-input(type="text")
                  label(for=".phrase-input") Phrase
            +clause-content-field("clause-list-anchor clause-content", "Clause Content", "required")
            +clause-content-field("clause-content-ext", "Continuation of Clause Content")
          .add-clause-container
            .divider
            a.btn.white-text.mrg.add-clause-btn.lighten-1(class=pri)&attributes(tooltip("Adds a new clause to the list", "right"))
              +icon("add_circle_outline", "left")
              | Add Clause
    +content-card("meta-data")
      .meta-input-wrapper
        .right.btn-floating.btn-large.waves-effect.waves-light.deep-orange.reset-button(for="meta-data")&attributes(tooltip("Resets these fields", "left"))
          +icon(resetIcon)
        h5 General Data
        .divider.reduced-width-divider
        .input-field
          input.required#author-name(type="text")
          label(for="author-name") Document Author
        .divider
        .row
          .col.xl4.m6.s12
            .input-field
              input.autocomplete.required#forum-name(type="text")
              label(for="forum-name") Forum
          .col.xl4.m6.s12
            .input-field
              input.required#question-of(type="text")
              label(for="question-of") Question of
          .col.xl4.s12
            .input-field
              input.autocomplete.required#main-spon(type="text")
              label(for="main-spon") Main Sponsor
          .col.s12
            label(for="co-spon") Co-Sponsors
            .chips.required#co-spon
    +clause-card("preamb-clauses", "preamb", "Preambulatory")
    +clause-card("op-clauses", "op", "Operative")
block scripts
  script(src="/js/resolutionFormat.js")
  script(src="/js/dataInteraction.js")
  script(src="/js/editorInit.js")
